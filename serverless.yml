service: baliciaga-backend

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  region: ap-southeast-1
  stage: ${opt:stage, 'dev'}
  apiGateway:
    binaryMediaTypes:
      - 'multipart/form-data'
      - 'image/*'
      - 'application/octet-stream'
  environment:
    NODE_ENV: production
    S3_BUCKET_NAME_SSM_PATH: /baliciaga/${sls:stage}/s3BucketName
    S3_CAFE_DATA_FILE_KEY_SSM_PATH: /baliciaga/${sls:stage}/s3DataFileKeyCafe
    S3_BAR_DATA_FILE_KEY_SSM_PATH: /baliciaga/${sls:stage}/s3DataFileKeyBar
    # DynamoDB Tables Environment Variables
    LISTINGS_TABLE: Baliciaga-Listings-${sls:stage}
    USERS_TABLE: Baliciaga-Users-${sls:stage}
    APPLICATIONS_TABLE: Baliciaga-Applications-${sls:stage}
    # AI Service Environment Variables
    GEMINI_API_KEY_SSM_PATH: /baliciaga/${sls:stage}/geminiApiKey
    # Profile Pictures S3 Bucket
    PROFILE_PICTURES_BUCKET_NAME: baliciaga-profile-pictures-${sls:stage}
    STAGE: ${sls:stage}
    # Cognito User Pool ID for JWT verification (will be replaced after deployment)
    USER_POOL_ID: WILL_BE_REPLACED_AFTER_DEPLOYMENT
    # Frontend URL SSM Path for CORS configuration
    FRONTEND_URL_SSM_PATH: /baliciaga/${sls:stage}/frontendUrl
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "ssm:GetParameter"
      Resource:
        # Permissions for S3 Bucket Name across stages
        - "arn:aws:ssm:ap-southeast-1:335069051432:parameter/baliciaga/dev/s3BucketName"
        - "arn:aws:ssm:ap-southeast-1:335069051432:parameter/baliciaga/staging/s3BucketName"
        - "arn:aws:ssm:ap-southeast-1:335069051432:parameter/baliciaga/prod/s3BucketName"
        # Permissions for S3 Cafe Data File Key across stages
        - "arn:aws:ssm:ap-southeast-1:335069051432:parameter/baliciaga/dev/s3DataFileKeyCafe"
        - "arn:aws:ssm:ap-southeast-1:335069051432:parameter/baliciaga/staging/s3DataFileKeyCafe"
        - "arn:aws:ssm:ap-southeast-1:335069051432:parameter/baliciaga/prod/s3DataFileKeyCafe"
        # Permissions for S3 Bar Data File Key across stages
        - "arn:aws:ssm:ap-southeast-1:335069051432:parameter/baliciaga/dev/s3DataFileKeyBar"
        - "arn:aws:ssm:ap-southeast-1:335069051432:parameter/baliciaga/staging/s3DataFileKeyBar"
        - "arn:aws:ssm:ap-southeast-1:335069051432:parameter/baliciaga/prod/s3DataFileKeyBar"
        # Permissions for Gemini API Key across stages
        - "arn:aws:ssm:ap-southeast-1:335069051432:parameter/baliciaga/dev/geminiApiKey"
        - "arn:aws:ssm:ap-southeast-1:335069051432:parameter/baliciaga/staging/geminiApiKey"
        - "arn:aws:ssm:ap-southeast-1:335069051432:parameter/baliciaga/prod/geminiApiKey"
        # Permissions for Frontend URL across stages
        - "arn:aws:ssm:ap-southeast-1:335069051432:parameter/baliciaga/dev/frontendUrl"
        - "arn:aws:ssm:ap-southeast-1:335069051432:parameter/baliciaga/staging/frontendUrl"
        - "arn:aws:ssm:ap-southeast-1:335069051432:parameter/baliciaga/prod/frontendUrl"
    # Add S3 access permissions for reading cafe data
    - Effect: "Allow"
      Action:
        - "s3:GetObject"
      Resource:
        - "arn:aws:s3:::baliciaga-database/data/cafes.json"
        - "arn:aws:s3:::baliciaga-database/data/*"
    # Add DynamoDB permissions for all tables
    - Effect: "Allow"
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:GetItem"
        - "dynamodb:Query"
        - "dynamodb:Scan"
        - "dynamodb:DeleteItem"
      Resource:
        - "arn:aws:dynamodb:ap-southeast-1:335069051432:table/Baliciaga-Listings-${sls:stage}"
        - "arn:aws:dynamodb:ap-southeast-1:335069051432:table/Baliciaga-Listings-${sls:stage}/index/*"
        - "arn:aws:dynamodb:ap-southeast-1:335069051432:table/Baliciaga-Users-${sls:stage}"
        - "arn:aws:dynamodb:ap-southeast-1:335069051432:table/Baliciaga-Users-${sls:stage}/index/*"
        - "arn:aws:dynamodb:ap-southeast-1:335069051432:table/Baliciaga-Applications-${sls:stage}"
        - "arn:aws:dynamodb:ap-southeast-1:335069051432:table/Baliciaga-Applications-${sls:stage}/index/*"
        - "arn:aws:dynamodb:ap-southeast-1:335069051432:table/baliciaga-verification-codes-${sls:stage}"
    # Add S3 permissions for listing images upload
    - Effect: "Allow"
      Action:
        - "s3:PutObject"
      Resource: "arn:aws:s3:::baliciaga-listing-images-${sls:stage}/*"
    # Add S3 permissions for profile pictures upload
    - Effect: "Allow"
      Action:
        - "s3:PutObject"
      Resource: "arn:aws:s3:::baliciaga-profile-pictures-${sls:stage}/*"
    # üîß ÊùÉÈôêÁªôËÆ§ËØÅËß¶ÂèëÂô®LambdaÂáΩÊï∞‰ΩøÁî®SESÂèëÈÄÅÈÇÆ‰ª∂ÂíåSNSÂèëÈÄÅÁü≠‰ø°
    - Effect: "Allow"
      Action:
        - "ses:SendEmail"
        - "ses:SendRawEmail"
        - "sns:Publish"
      Resource: "*"

functions:
  placesApi:
    handler: src/fetchPlaces.handler
    timeout: 180
    events:
      - http:
          path: /places
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-User-Agent
              - X-Amz-Security-Token
            allowCredentials: false
      - http:
          path: /places/{placeId}
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-User-Agent
              - X-Amz-Security-Token
            allowCredentials: false

  # Get User Profile
  getUserProfile:
    handler: src/features/rentals/getUserProfile.handler
    timeout: 30
    events:
      - http:
          path: /users/me
          method: get
          cors: true
          authorizer:
            name: CognitoUserPoolAuthorizer
            type: COGNITO_USER_POOLS
            arn: 
              Fn::GetAtt:
                - CognitoUserPool
                - Arn

  # Create User Profile
  createUserProfile:
    handler: src/features/rentals/createUserProfile.handler
    timeout: 30
    events:
      - http:
          path: /users/profile
          method: post
          cors: true
          authorizer:
            name: CognitoUserPoolAuthorizer
            type: COGNITO_USER_POOLS
            arn: 
              Fn::GetAtt:
                - CognitoUserPool
                - Arn

  # Create Listing
  createListing:
    handler: src/features/rentals/createListing.handler
    timeout: 30
    events:
      - http:
          path: /listings
          method: post
          cors: true
          authorizer:
            name: CognitoUserPoolAuthorizer
            type: COGNITO_USER_POOLS
            arn: 
              Fn::GetAtt:
                - CognitoUserPool
                - Arn

  # Get Listings
  getListings:
    handler: src/features/rentals/getListings.handler
    timeout: 30
    events:
      - http:
          path: /listings
          method: get
          cors:
            origin: ${ssm:/baliciaga/${sls:stage}/frontendUrl, '*'}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-test-user-email
              - x-test-user-sub
              - x-test-user-groups
            allowCredentials: true
          # No authorizer - this is a public endpoint
      - http:
          path: /listings
          method: options
          cors:
            origin: ${ssm:/baliciaga/${sls:stage}/frontendUrl, '*'}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-test-user-email
              - x-test-user-sub
              - x-test-user-groups
            allowCredentials: true

  # Get Listing Detail
  getListingDetail:
    handler: src/features/rentals/getListingDetail.handler
    timeout: 30
    events:
      - http:
          path: /listings/{listingId}
          method: get
          cors: true
          # No authorizer - this is a public endpoint

  # Create Application
  createApplication:
    handler: src/features/rentals/createApplication.handler
    timeout: 30
    events:
      - http:
          path: /listings/{listingId}/applications
          method: post
          cors: true
          authorizer:
            name: CognitoUserPoolAuthorizer
            type: COGNITO_USER_POOLS
            arn: 
              Fn::GetAtt:
                - CognitoUserPool
                - Arn

  # Get Applications for Listing (Owner Only)
  getApplications:
    handler: src/features/rentals/getApplications.handler
    timeout: 30
    events:
      - http:
          path: /listings/{listingId}/applications
          method: get
          cors: true
          authorizer:
            name: CognitoUserPoolAuthorizer
            type: COGNITO_USER_POOLS
            arn: 
              Fn::GetAtt:
                - CognitoUserPool
                - Arn

  # Get User's Own Applications
  getUserApplications:
    handler: src/features/rentals/getUserApplications.handler
    timeout: 30
    events:
      - http:
          path: /users/me/applications
          method: get
          cors: true
          authorizer:
            name: CognitoUserPoolAuthorizer
            type: COGNITO_USER_POOLS
            arn: 
              Fn::GetAtt:
                - CognitoUserPool
                - Arn

  # Get User's Own Listings
  getUserListings:
    handler: src/features/rentals/getUserListings.handler
    timeout: 30
    events:
      - http:
          path: /users/me/listings
          method: get
          cors: true
          authorizer:
            name: CognitoUserPoolAuthorizer
            type: COGNITO_USER_POOLS
            arn: 
              Fn::GetAtt:
                - CognitoUserPool
                - Arn

  # Update Application Status (Accept/Ignore)
  updateApplication:
    handler: src/features/rentals/updateApplication.handler
    timeout: 30
    events:
      - http:
          path: /applications/{applicationId}
          method: put
          cors: true
          authorizer:
            name: CognitoUserPoolAuthorizer
            type: COGNITO_USER_POOLS
            arn: 
              Fn::GetAtt:
                - CognitoUserPool
                - Arn

  # Cancel Application (User cancels their own application)
  cancelApplication:
    handler: src/handlers/applications/cancelApplication.handler
    timeout: 30
    events:
      - http:
          path: /applications/{applicationId}/cancel
          method: patch
          cors: true
          authorizer:
            name: CognitoUserPoolAuthorizer
            type: COGNITO_USER_POOLS
            arn: 
              Fn::GetAtt:
                - CognitoUserPool
                - Arn

  # Analyze Listing Source with AI
  analyzeListingSource:
    handler: src/features/rentals/analyzeListingSource.handler
    timeout: 60
    events:
      - http:
          path: /listings/analyze-source
          method: post
          cors: true
          authorizer:
            name: CognitoUserPoolAuthorizer
            type: COGNITO_USER_POOLS
            arn: 
              Fn::GetAtt:
                - CognitoUserPool
                - Arn

  # Get Upload URL for Images
  getUploadUrl:
    handler: src/features/rentals/getUploadUrl.handler
    timeout: 30
    events:
      - http:
          path: /listings/upload-url
          method: post
          cors: true
          authorizer:
            name: CognitoUserPoolAuthorizer
            type: COGNITO_USER_POOLS
            arn: 
              Fn::GetAtt:
                - CognitoUserPool
                - Arn

  # Get Upload URL for Profile Pictures
  getProfilePictureUploadUrl:
    handler: src/features/users/getProfilePictureUploadUrl.handler
    timeout: 30
    events:
      - http:
          path: /users/me/avatar-upload-url
          method: post
          cors: true
          authorizer:
            name: CognitoUserPoolAuthorizer
            type: COGNITO_USER_POOLS
            arn: 
              Fn::GetAtt:
                - CognitoUserPool
                - Arn

  # Update Listing
  updateListing:
    handler: src/features/rentals/updateListing.handler
    timeout: 30
    events:
      - http:
          path: /listings/{listingId}
          method: put
          cors: true
          authorizer:
            name: CognitoUserPoolAuthorizer
            type: COGNITO_USER_POOLS
            arn: 
              Fn::GetAtt:
                - CognitoUserPool
                - Arn

  # Finalize Listing (Complete Deal)
  finalizeListing:
    handler: src/features/rentals/finalizeListing.handler
    timeout: 30
    events:
      - http:
          path: /listings/{listingId}/finalize
          method: patch
          cors: true
          authorizer:
            name: CognitoUserPoolAuthorizer
            type: COGNITO_USER_POOLS
            arn: 
              Fn::GetAtt:
                - CognitoUserPool
                - Arn

  # Cancel Listing (Mid-way Cancellation)
  cancelListing:
    handler: src/features/rentals/cancelListing.handler
    timeout: 30
    events:
      - http:
          path: /listings/{listingId}/cancel
          method: patch
          cors: true
          authorizer:
            name: CognitoUserPoolAuthorizer
            type: COGNITO_USER_POOLS
            arn: 
              Fn::GetAtt:
                - CognitoUserPool
                - Arn

  # Increment View Count
  incrementViewCount:
    handler: src/features/rentals/incrementViewCount.handler
    timeout: 30
    events:
      - http:
          path: /listings/{listingId}/view
          method: post
          cors: true
          # No authorizer - this is a public endpoint for tracking views

  # üîß Êó†ÂØÜÁ†ÅËÆ§ËØÅËß¶ÂèëÂô® - Auth Triggers (Â∑≤Á¶ÅÁî®)
  # DefineAuthChallenge:
  #   handler: src/features/auth/defineChallenge.handler
  #   timeout: 30

  # CreateAuthChallenge:
  #   handler: src/features/auth/createChallenge.handler
  #   timeout: 30

  # VerifyAuthChallengeResponse:
  #   handler: src/features/auth/verifyChallenge.handler
  #   timeout: 30

  # Cognito Triggers
  postConfirmation:
    handler: src/features/auth/postConfirmation.handler
    timeout: 30

plugins:
  - serverless-offline
  - serverless-dotenv-plugin
  # - serverless-dynamodb  # Ê≥®ÈáäÊéâ‰ª•ÈÅøÂÖçËøûÊé•Êú¨Âú∞Êï∞ÊçÆÂ∫ì

custom:
  serverless-offline:
    httpPort: 3006 
  dotenv:
    exclude:
      - vought
      - AWS_REGION
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY

resources:
  Resources:
    # Cognito User Pool - Êó†ÂØÜÁ†ÅËÆ§ËØÅÈÖçÁΩÆ
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: baliciaga-user-pool-passwordless-${sls:stage}
        Schema:
          - Name: email
            AttributeDataType: String
            Mutable: false
            Required: true
          - Name: phone_number
            AttributeDataType: String
            Mutable: true
            Required: false
        # üîß ÊòéÁ°ÆÁ¶ÅÁî®MFA‰ª•ÈÅøÂÖçÂèåÈáçÈ™åËØÅÁ†Å
        MfaConfiguration: "OFF"
        # üîß ‰ΩøÁî®ÈÇÆÁÆ±‰Ωú‰∏∫Áî®Êà∑Âêç
        UsernameAttributes:
          - email
        # üîß ÊîØÊåÅÈÇÆÁÆ±È™åËØÅ
        AutoVerifiedAttributes:
          - email
        # üîß Ê∑ªÂä†È™åËØÅÊ∂àÊÅØÊ®°ÊùøÔºåÁ°Æ‰øù‰∏ÄËá¥ÁöÑÈ™åËØÅ‰ΩìÈ™å
        VerificationMessageTemplate:
          DefaultEmailOption: CONFIRM_WITH_CODE
          EmailMessage: "ÊÇ®ÁöÑÈ™åËØÅÁ†ÅÊòØ {####}"
          EmailSubject: "Baliciaga È™åËØÅÁ†Å"
        # üîß LambdaËß¶ÂèëÂô®ÈÖçÁΩÆÔºà‰ªÖ‰øùÁïôPostConfirmationÔºâ
        LambdaConfig:
          PostConfirmation: !GetAtt PostConfirmationLambdaFunction.Arn
          # DefineAuthChallenge: !GetAtt DefineAuthChallengeLambdaFunction.Arn
          # CreateAuthChallenge: !GetAtt CreateAuthChallengeLambdaFunction.Arn
          # VerifyAuthChallengeResponse: !GetAtt VerifyAuthChallengeResponseLambdaFunction.Arn
        # üîß ÂÖÅËÆ∏Áî®Êà∑Ëá™Ë°åÊ≥®ÂÜåÔºàÁ¶ÅÁî®È´òÁ∫ßÂÆâÂÖ®ÂäüËÉΩ‰ª•Á¨¶ÂêàESSENTIALS‰ª∑Ê†ºÂ±ÇÔºâ
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: false

    # Cognito User Pool Client - ÊîØÊåÅËá™ÂÆö‰πâËÆ§ËØÅÊµÅÁ®ã
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: baliciaga-user-pool-client-passwordless-${sls:stage}
        UserPoolId:
          Ref: CognitoUserPool
        # üîß ÂêØÁî®Ê†áÂáÜÂØÜÁ†ÅËÆ§ËØÅ
        ExplicitAuthFlows:
          # - ALLOW_CUSTOM_AUTH        # ÂÖÅËÆ∏Ëá™ÂÆö‰πâËÆ§ËØÅÊµÅÁ®ãÔºàÂ∑≤Á¶ÅÁî®Ôºâ
          - ALLOW_REFRESH_TOKEN_AUTH # Áî®‰∫étokenÂà∑Êñ∞
          - ALLOW_USER_SRP_AUTH      # ÂÖÅËÆ∏Ê†áÂáÜSRPÂØÜÁ†ÅËÆ§ËØÅ
        GenerateSecret: false
        # üîß ÊîØÊåÅÈÇÆÁÆ±ËØªÂÜô
        ReadAttributes:
          - email
        WriteAttributes:
          - email
        # üîß Á¶ÅÁî®‰∏çÂøÖË¶ÅÁöÑÊåëÊàòÔºåÈÅøÂÖçÈ¢ùÂ§ñÁöÑÈ™åËØÅÊ≠•È™§
        PreventUserExistenceErrors: ENABLED

    # DynamoDB Listings Table
    ListingsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Baliciaga-Listings-${sls:stage}
        AttributeDefinitions:
          - AttributeName: listingId
            AttributeType: S
          - AttributeName: status
            AttributeType: S
          - AttributeName: initiatorId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: listingId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: StatusIndex
            KeySchema:
              - AttributeName: status
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: InitiatorIndex
            KeySchema:
              - AttributeName: initiatorId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true

    # DynamoDB Users Table
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Baliciaga-Users-${sls:stage}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: cognitoSub
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: CognitoSubIndex
            KeySchema:
              - AttributeName: cognitoSub
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true

    # DynamoDB Applications Table
    ApplicationsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Baliciaga-Applications-${sls:stage}
        AttributeDefinitions:
          - AttributeName: applicationId
            AttributeType: S
          - AttributeName: listingId
            AttributeType: S
          - AttributeName: applicantId
            AttributeType: S
          - AttributeName: status
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: applicationId
            KeyType: HASH
        GlobalSecondaryIndexes:
          # GSI for querying applications by listing
          - IndexName: ListingApplicationsIndex
            KeySchema:
              - AttributeName: listingId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          # GSI for querying applications by user
          - IndexName: UserApplicationsIndex
            KeySchema:
              - AttributeName: applicantId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          # GSI for querying applications by listing and status
          - IndexName: ListingStatusIndex
            KeySchema:
              - AttributeName: listingId
                KeyType: HASH
              - AttributeName: status
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true

    # DynamoDB Verification Codes Table - üîß Áî®‰∫éÂ≠òÂÇ®ÂíåÊü•ËØ¢È™åËØÅÁ†ÅÔºåÊîØÊåÅËá™Âä®ÂåñÊµãËØï
    VerificationCodesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: baliciaga-verification-codes-${sls:stage}
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        # ËÆæÁΩÆTTLÔºåÈ™åËØÅÁ†Å5ÂàÜÈíüÂêéËá™Âä®ËøáÊúü
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true

    # üîß LambdaÊùÉÈôêËµÑÊ∫ê - ÂÖÅËÆ∏CognitoË∞ÉÁî®ËÆ§ËØÅËß¶ÂèëÂô®ÔºàÂ∑≤Á¶ÅÁî®Êó†ÂØÜÁ†ÅËÆ§ËØÅÔºâ
    # DefineAuthChallengeInvocationPermission:
    #   Type: AWS::Lambda::Permission
    #   Properties:
    #     Action: lambda:InvokeFunction
    #     FunctionName: !GetAtt DefineAuthChallengeLambdaFunction.Arn
    #     Principal: cognito-idp.amazonaws.com
    #     SourceArn: !GetAtt CognitoUserPool.Arn

    # CreateAuthChallengeInvocationPermission:
    #   Type: AWS::Lambda::Permission
    #   Properties:
    #     Action: lambda:InvokeFunction
    #     FunctionName: !GetAtt CreateAuthChallengeLambdaFunction.Arn
    #     Principal: cognito-idp.amazonaws.com
    #     SourceArn: !GetAtt CognitoUserPool.Arn

    # VerifyAuthChallengeInvocationPermission:
    #   Type: AWS::Lambda::Permission
    #   Properties:
    #     Action: lambda:InvokeFunction
    #     FunctionName: !GetAtt VerifyAuthChallengeResponseLambdaFunction.Arn
    #     Principal: cognito-idp.amazonaws.com
    #     SourceArn: !GetAtt CognitoUserPool.Arn

    PostConfirmationInvocationPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !GetAtt PostConfirmationLambdaFunction.Arn
        Principal: cognito-idp.amazonaws.com
        SourceArn: !GetAtt CognitoUserPool.Arn

    # S3 Bucket for Listing Images
    ListingImagesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: baliciaga-listing-images-${sls:stage}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*' # Âú®Áîü‰∫ßÁéØÂ¢É‰∏≠Â∫îÊõøÊç¢‰∏∫‰Ω†ÁöÑÂâçÁ´ØÂüüÂêç
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - PUT
                - GET
                - HEAD
                - POST
                - DELETE

    # S3 Bucket for Profile Pictures
    ProfilePicturesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: baliciaga-profile-pictures-${sls:stage}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*' # Âú®Áîü‰∫ßÁéØÂ¢É‰∏≠Â∫îÊõøÊç¢‰∏∫‰Ω†ÁöÑÂâçÁ´ØÂüüÂêç
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - PUT
                - GET

    # S3 Bucket Policy for Profile Pictures - Allow public read access
    # NOTE: Commented out due to BlockPublicAccess restrictions
    # ProfilePicturesBucketPolicy:
    #   Type: AWS::S3::BucketPolicy
    #   Properties:
    #     Bucket: !Ref ProfilePicturesBucket
    #     PolicyDocument:
    #       Statement:
    #         - Effect: Allow
    #           Principal: '*'
    #           Action: s3:GetObject
    #           Resource: !Sub 'arn:aws:s3:::${ProfilePicturesBucket}/*'

  Outputs:
    CognitoUserPoolId:
      Value:
        Ref: CognitoUserPool
      Export:
        Name: ${sls:stage}-CognitoUserPoolId
    
    CognitoUserPoolClientId:
      Value:
        Ref: CognitoUserPoolClient
      Export:
        Name: ${sls:stage}-CognitoUserPoolClientId

    ListingsTableName:
      Value:
        Ref: ListingsTable
      Export:
        Name: ${sls:stage}-ListingsTableName

    UsersTableName:
      Value:
        Ref: UsersTable
      Export:
        Name: ${sls:stage}-UsersTableName

    ApplicationsTableName:
      Value:
        Ref: ApplicationsTable
      Export:
        Name: ${sls:stage}-ApplicationsTableName

    VerificationCodesTableName:
      Value:
        Ref: VerificationCodesTable
      Export:
        Name: ${sls:stage}-VerificationCodesTableName

    ListingImagesBucketName:
      Value:
        Ref: ListingImagesBucket
      Export:
        Name: ${sls:stage}-ListingImagesBucketName

    ProfilePicturesBucketName:
      Value:
        Ref: ProfilePicturesBucket
      Export:
        Name: ${sls:stage}-ProfilePicturesBucketName

